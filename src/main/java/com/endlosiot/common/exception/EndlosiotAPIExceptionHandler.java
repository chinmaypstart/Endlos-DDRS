package com.endlosiot.common.exception;

import com.endlosiot.common.enums.ResponseCode;
import com.endlosiot.common.logger.LoggerService;
import com.endlosiot.common.response.CommonResponse;
import com.endlosiot.common.response.Response;
import com.endlosiot.common.util.WebUtil;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.io.IOException;

/**
 * This is a common exception handler which wrapped over controller. This will
 * be used to handle custom & other common exception. This handler will return
 * response to vendor in json format.
 *
 * @author Nirav.Shah
 * @since 24/12/2019
 */
@ControllerAdvice
public class EndlosiotAPIExceptionHandler {

    /**
     * This method handle all custom generated exception and provide a response with
     * necessary HTTP response code.
     *
     * @param endlosiotAPIException exception
     */
    @ExceptionHandler(EndlosiotAPIException.class)
    public ResponseEntity<Response> handleProgramException(EndlosiotAPIException endlosiotAPIException) {
        LoggerService.error(endlosiotAPIException.getMessage());
        if (ResponseCode.UNAUTHORIZED_ACCESS.getCode() == endlosiotAPIException.getCode()) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(CommonResponse
                    .create(endlosiotAPIException.getCode(), endlosiotAPIException.getMessage()));
        } else if (ResponseCode.INVALID_REQUEST.getCode() == endlosiotAPIException.getCode()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(CommonResponse
                    .create(endlosiotAPIException.getCode(), endlosiotAPIException.getMessage()));
        } else if (ResponseCode.AUTHENTICATION_REQUIRED.getCode() == endlosiotAPIException.getCode()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(CommonResponse
                    .create(endlosiotAPIException.getCode(), endlosiotAPIException.getMessage()));
        } else {
            return ResponseEntity.status(HttpStatus.OK).body(CommonResponse.create(endlosiotAPIException.getCode(),
                    endlosiotAPIException.getMessage()));
        }
    }

    /**
     * Handle any runtime exception.
     *
     * @param exception exception
     * @return {@link Response}
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Response> handleException(Exception exception) {
        LoggerService.exception(exception);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(CommonResponse
                .create(ResponseCode.INTERNAL_SERVER_ERROR.getCode(), ResponseCode.INTERNAL_SERVER_ERROR.getMessage()));
    }

    /**
     * It handles data parsing exception generated by JACKSON mapping
     *
     * @param jsonProcessingException
     * @throws IOException
     */
    @ExceptionHandler({HttpMessageNotReadableException.class, InvalidFormatException.class,
            MismatchedInputException.class})
    public void handleIllegalArgumentException(JsonProcessingException jsonProcessingException) throws IOException {
        LoggerService.exception(jsonProcessingException);
        if (jsonProcessingException instanceof InvalidFormatException) {
            WebUtil.getCurrentResponse().sendError(HttpStatus.CONFLICT.value(),
                    jsonProcessingException.getOriginalMessage());
        } else if (jsonProcessingException instanceof MismatchedInputException) {
            WebUtil.getCurrentResponse().sendError(HttpStatus.BAD_REQUEST.value(),
                    jsonProcessingException.getOriginalMessage());
        }
    }
}
